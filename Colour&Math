#include "RGBalance.h";
#include "colourDictionary.h";

boolean balanceSet = false;

RGBalance colourReader(13, 12, 11, A5);
RGBalance whiteBalance(13, 12, 11, A5); //for calibrating the data that corresponds with the colour white (maximum light)
RGBalance blackBalance(13, 12, 11, A5); //for calibrating the data that corresponds with the colour black (minimum light)
RGBalance colourBalance(13, 12, 11, A5); //for calibrating the data that corresponds with every colour inbetween.

//these values will be assigned to an array with a maximum of three values, containing a red, green and blue light value in each.
float white[3];
float black[3];
float colour[3];

void setup(){
  colourReader.setup();
  Serial.begin(9600);
  Serial.println("setup complete");
}

void loop(){
  checkBalance();
  checkColour();
  printRGB();
  }

void checkBalance(){
  if(balanceSet == false){
    setBalance();
  }
}

void setBalance(){
  delay(5000); //gives us five seconds to place the sample in front of the sensor.
  white[0] = whiteBalance.findR();
  white[1] = whiteBalance.findG();
  white[2] = whiteBalance.findB();
  delay(5000);
  black[0] = blackBalance.findR();
  black[1] = blackBalance.findG();
  black[2] = blackBalance.findB();
  
  balanceSet = true; //this function will only be called once.
  delay(5000);
}

void checkColour(){
  colour[0] = colourBalance.findR();
  colour[1] = colourBalance.findG();
  colour[2] = colourBalance.findB();
  for (int i = 0; i <= 2; i++) {
    float greyDiff = white[i] - black[i];
    colour[i] = (colour[i] - black[i])/(greyDiff)*255; //ensures the light values are within the pre-calibrated range.
  }
}

void printRGB(){
  for (int i = 0; i < 3; i++) {
    colour[i] = constrain(colour[i], 0, 255); //allows the data to be identified on an RGB colour spectrum using hex codes.
  }
  
  //sorts and prints the light values to the serial monitor.
  Serial.print("R = ");
  Serial.println(int(colour[0]));
  Serial.print("G = ");
  Serial.println(int(colour[1]));
  Serial.print("B = ");
  Serial.println(int(colour[2]));

  colourDictionary(colour[0], colour[1], colour[2]);

  delay(2000); //waits two seconds before being called again.
}
